package routines;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javax.swing.plaf.basic.BasicScrollPaneUI.HSBChangeListener;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class tst_md5_s {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
	
	
	
	public static String getHash(String key) {
		
		try {
			byte[] uniqueKey = key.getBytes();
				byte[] hash = null;
				try {
					hash = MessageDigest.getInstance("MD5").digest(uniqueKey);
				} catch (NoSuchAlgorithmException e) {
					throw new Error("no MD5 support");
				}
				
				StringBuffer hashString = new StringBuffer();
				for (int i = 0; i < hash.length; ++i) {
					String hex = Integer.toHexString(hash[i]);
					if (hex.length() == 1) {
						hashString.append('0');
						hashString.append(hex.charAt(hex.length() -1));
					} else {
						hashString.append(hex.substring(hex.length() -2));
					}
				}
				return hashString.toString();
		} catch (Exception e) {
			throw new Error("Error in void MD5)");
		}
		
	}
	
	
    public static void helloExample(String message) {
        if (message == null) {
            message = "World"; //$NON-NLS-1$
        }
        System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
    }
}
